---
const projects = [
  {
    img: "/images/proj1.png",
    href: "#",
    alt: "",
  },
  {
    img: "/images/proj2.png",
    href: "#",
    alt: "",
  },
  {
    img: "/images/proj3.png",
    href: "#",
    alt: "",
  },
];
---

<section id="projects" class="container">
  <h2>مشاريع مختارة</h2>
  <ul class="projects">
    {
      projects.map(({ img, href, alt }) => (
        <li class="card">
          <a href={href} target="_blank">
            <img decoding="async" loading="lazy" src={img} alt={alt} />
          </a>
        </li>
      ))
    }
  </ul>
</section>

<style>
  .projects {
    display: flex;
    padding-bottom: 0.5rem;
    gap: 1rem;
    width: fit-content;
  }

  li {
    padding: 0.75rem;
  }

  li img {
    aspect-ratio: 16/9;
    height: 100%;
    width: auto;
  }

  li a {
    display: block;
    position: relative;
    overflow: hidden;
    border-radius: var(--br-md);
    height: 15rem;
  }

  li a:hover::before {
    content: "";
    background-image: url("/icons/open.svg");
    background-repeat: no-repeat;
    background-position: center;
    background-color: rgba(0, 0, 0, 40%);
    background-size: 2rem;
    position: absolute;
    inset: 0;
    margin: auto;
    z-index: 100;
  }
</style>

<script>
  const projectsContainer = document.getElementById("projects");
  const projects = document.querySelector("#projects .projects");
  let isDragging = false;
  let startPos = 0;
  let currentTranslate = 0;
  let prevTranslate = 0;
  let maxScrollWidth;

  projects.addEventListener("mousedown", dragStart);
  projects.addEventListener("touchstart", dragStart);
  projects.addEventListener("mouseup", dragEnd);
  projects.addEventListener("touchend", dragEnd);
  projects.addEventListener("mousemove", drag);
  projects.addEventListener("touchmove", drag);
  projects.addEventListener("mouseenter", () => isDragging = false);

  const calculateMaximumScrollWidth = () => {
    const projectsContainerPad = window .getComputedStyle(projectsContainer, null) .getPropertyValue("padding-inline");
    maxScrollWidth = projects.offsetWidth - (projectsContainer?.offsetWidth - parseInt(projectsContainerPad) * 2);
  }

  window.addEventListener("resize", calculateMaximumScrollWidth);

  function dragStart(event) {
    event.preventDefault();
    startPos = getPositionX(event);
    isDragging = true;

    requestAnimationFrame(animation);
  }

  function dragEnd() {
    isDragging = false;
    startPos = 0;
    prevTranslate = currentTranslate;
  }

  function drag(event) {
    if (isDragging) {
      const currentPosition = getPositionX(event);
      currentTranslate = prevTranslate + currentPosition - startPos;
      console.log({ currentTranslate });

      if (currentTranslate > maxScrollWidth) {
        currentTranslate = maxScrollWidth;
      }
      if (currentTranslate < 0) {
        currentTranslate = 0;
      }
    }
  }

  function getPositionX(event) {
    return event.type.includes("mouse")
      ? event.pageX
      : event.touches[0].clientX;
  }

  function animation() {
    setTranslateX();
    if (isDragging) {
      requestAnimationFrame(animation);
    }
  }

  function setTranslateX() {
    projects.style.transform = `translateX(${currentTranslate}px)`;
  }
</script>
