---
import i18next, { t } from "i18next";
const route =
  i18next.language === "en" ? "/en" : i18next.language === "tr" ? "/tr" : "";
---

<form action="https://formsubmit.co/support@amerna.org" method="POST">
  <input type="hidden" name="_captcha" value="false" />
  <input type="hidden" name="_template" value="box" />
  <input id="affiliate" type="hidden" name="affiliate" />
  <input
    type="hidden"
    name="_next"
    value={`https://amerna.org${route}/thanks`}
  />

  <div class="tabs">
    <input
      hidden
      id="client-mode"
      value="client"
      name="mode"
      type="radio"
      checked
    />
    <label for="client-mode" class="cta btn md shadow"
      >{t("footer.form.mode.client")}</label
    >

    <input
      hidden
      id="freelancer-mode"
      value="freelancer"
      name="mode"
      type="radio"
    />
    <label for="freelancer-mode" class="cta btn md shadow">
      {t("footer.form.mode.freelancer")}
    </label>
  </div>

  <label for="name">{t("footer.form.name")}</label>
  <input autocomplete="name" id="name" type="text" name="name" />

  <label for="email">{t("footer.form.email")}</label>
  <input autocomplete="email" id="email" type="email" name="email" />
  <label for="email">{t("footer.form.phone")}</label>
  <input autocomplete="phone" id="phone" type="tel" name="phone" />

  <label id="service-client" for="service"
    >{t("footer.form.service.client")}</label
  >
  <label id="service-freelancer" hidden for="service"
    >{t("footer.form.service.freelancer")}</label
  >

  <div class="custom-select">
    <select name="service" id="service">
      <option value="web">{t("footer.form.service.web")}</option>
      <option value="security">{t("footer.form.service.security")}</option>
      <option value="dev">{t("footer.form.service.dev")}</option>
      <option value="apps">{t("footer.form.service.apps")}</option>
      <option value="other">{t("footer.form.service.other")}</option>
    </select>
  </div>

  <label id="message-client" for="message"
    >{t("footer.form.message.client")}</label
  >
  <label hidden id="message-freelancer" for="message"
    >{t("footer.form.message.freelancer")}</label
  >

  <textarea name="message" id="message" rows="10"></textarea>

  <input
    type="submit"
    class="btn primary shadow md"
    value={t("footer.form.action")}
  />
</form>

<style>
  form {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;
  }

  .tabs {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .tabs > label {
    flex: 1;
    cursor: pointer;
    margin: 0;
  }

  .tabs > input:not(:checked) + label {
    border: 1px solid rgb(var(--primary));
  }

  .tabs > input:checked + label {
    background-color: rgb(var(--primary));
    color: rgb(var(--white));
  }

  label {
    font-size: var(--fz-sm);
    padding-inline-start: var(--br-sm);
  }

  input[type="submit"]:hover {
    cursor: pointer;
  }

  input[type="submit"],
  label:not(:first-of-type) {
    margin-top: 1rem;
  }

  textarea,
  select,
  input {
    font-size: var(--fz-sm);
    padding: 0.25rem 0.75rem;
    border-radius: var(--br-sm);
    border: 1px solid rgb(var(--dark));
    background-color: rgb(var(--white));
    padding: 0.675em 1em;
    line-height: 1.7;
    max-width: 100%;
  }

  select {
    padding: 0.675em 1em 0.675em 3em;
  }

  textarea:focus,
  select:focus,
  input:focus {
    border: 1px solid rgb(var(--secondary));
  }

  textarea {
    resize: vertical;
    min-height: 5rem;
  }

  select {
    appearance: none;
    -webkit-appearance: none;
    width: 100%;
    cursor: pointer;
  }

  .custom-select {
    position: relative;
  }

  .custom-select::before,
  .custom-select::after {
    --size: 0.3rem;
    content: "";
    position: absolute;
    left: 1rem;
    pointer-events: none;
  }

  .custom-select::before {
    border-left: var(--size) solid transparent;
    border-right: var(--size) solid transparent;
    border-bottom: var(--size) solid rgb(var(--text));
    top: 40%;
  }

  .custom-select::after {
    border-left: var(--size) solid transparent;
    border-right: var(--size) solid transparent;
    border-top: var(--size) solid rgb(var(--text));
    top: 55%;
  }
</style>

<script defer>
  const clientRadio = document.getElementById("client-mode");
  const freelancerRadio = document.getElementById("freelancer-mode");
  const serviceClient = document.getElementById("service-client");
  const serviceFreelancer = document.getElementById("service-freelancer");
  const messageClient = document.getElementById("message-client");
  const messageFreelancer = document.getElementById("message-freelancer");

  const handleModeChange = (e) => {
    console.log(e.target);
    if (e.target.value === "client") {
      serviceClient.hidden = false;
      serviceFreelancer.hidden = true;
      messageClient.hidden = false;
      messageFreelancer.hidden = true;
    }

    if (e.target.value === "freelancer") {
      serviceClient.hidden = true;
      serviceFreelancer.hidden = false;
      messageClient.hidden = true;
      messageFreelancer.hidden = false;
    }
  };

  clientRadio?.addEventListener("change", handleModeChange);
  freelancerRadio?.addEventListener("change", handleModeChange);

  const affiliate = document.getElementById("affiliate");
  affiliate.value = new URLSearchParams(window.location.search).get("affiliate");
</script>
